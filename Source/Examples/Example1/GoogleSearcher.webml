//
// Classes declarations.
//

class Result
{
    string title;
    string url;
}

class QueryState
{
    string info;
}

//
// Helper C# methods.
//

string urlencode(string str) c# @'
    return System.Web.HttpUtility.UrlEncode(str);
'
string htmldecode(string str) c# @'
    return System.Web.HttpUtility.HtmlDecode(str);
'

//
// Extraction methods.
//
// Methods named "main" cannot be called explicitly, they represent the entry points of extraction.
// Arguments of main methods can be both value-types or references to user defined classes and lists.
// - Values of value-type arguments are automatically initialized within the context class constructor.
//   They should be used as read-only variables.
//   Value types: string, int, bool, double, datetime
// - Object and list arguments represents the results of extraction. They are automatically exposed as properties of context class.
//   By accessing these properties, extraction is executed if some unknown value is requested or a list is enumerated.
//   They should be used as write-only variables.
//

main(Result[] GoogleResults, QueryState state, string searchQuery)
{
    [open("http://www.google.com/search?hl=en&q=" + urlencode(searchQuery))]
    {
        googlepage(GoogleResults);
        searchinfo(state);
    }
}

// extracting from google results page
googlepage(Result[] items)
{
    foreach(xmlmatch(@'
        <h3 class="r">
            <a href="~@rhref@~" class="l">~@rtitle@~</a>
        </h3>
    '))
    {
        items[] = Result(url=htmldecode(rhref),title=rtitle);
    }
    
    foreach(xmlmatch(@'<a href="~@rhref@~"><span class="csb ch" style="background-position:-76px 0;margin-right:34px;width:66px" />Next</a>'))
        [open(htmldecode(rhref))]googlepage(items);
}

searchinfo(QueryState state)
{
    foreach(match(@'<p id=resultStats>&nbsp;~@strstat@~&nbsp;</div>'))
        state.info = strstat;
}