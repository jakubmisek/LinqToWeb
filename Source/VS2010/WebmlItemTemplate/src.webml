//
// Classes declarations.
//

class Result
{
	string title;
	string url;
}

class QueryState
{
	string info;
}

//
// Helper C# methods.
//

string urlencode(string str) c# @'
	return System.Web.HttpUtility.UrlEncode(str);
'
string htmldecode(string str) c# @'
	return System.Web.HttpUtility.HtmlDecode(str);
'

//
// Extraction methods.
//
// Methods named "main" cannot be called explicitly, they represent the entry points of extraction.
// Arguments of main methods can be both value-types or references to user defined classes and lists.
// - Values of value-type arguments are automatically initialized within the context class constructor.
//   They should be used as read-only variables.
//   Value types: string, int, bool, double, datetime
// - Object and list arguments represents the results of extraction. They are automatically exposed as properties of context class.
//   By accessing these properties, extraction is executed if some unknown value is requested or a list is enumerated.
//   They should be used as write-only variables.
//

main(Result[] BingResults, QueryState state, string searchQuery)
{
	[open("http://www.bing.com/search?q=" + urlencode(searchQuery))]
	{
		bingpage(BingResults);
		searchinfo(state);
	}
}

// extracting from bing results page
bingpage(Result[] items)
{
	foreach(xmlmatch(@'
		<li class="sa_wr">
			<div class="sa_cc">
				<div class="sb_tlst">
					<h3><a href="~@rhref@~">~@rtitle@~</a></h3>
				</div>
			</div>
		</li>
	'))
	{
		items[] = Result(url=htmldecode(rhref),title=rtitle);
	}
	
	foreach(xmlmatch(@'<a href="~@rhref@~" class="sb_pagN"></a>'))
		[open(htmldecode(rhref))]bingpage(items);
}

searchinfo(QueryState state)
{
	foreach(match(@'<span class="sb_count">~@strstat@~</span>'))
		state.info = strstat;
}